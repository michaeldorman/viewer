tabPanel(title = "Download",
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(server = server, ui = ui)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("RSQLite")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Birds observations into a single CSV
library(magrittr)
library(plyr)
# library(XLConnect)
# Sys.setlocale("LC_ALL", "Hebrew")
# path = "C:\\Google Drive\\Data"
path %>% file.path("functions_general.R") %>% source
# Columns
cols = c(
"campaign",
"group",
"year",
"season",
"unit",
"subunit",
"site",
"factor",
"proximity",
"habitat",
"lon",
"lat",
"date",
"observer",
"datetime",
"species_latin", # -> species_latin
"rad1",
"rad2",
"rad3",
"rad4",
"total",
"comments")
cols_events = c(
"campaign",
"group",
"year",
"season",
"unit",
"subunit",
"site",
"factor",
"proximity",
"habitat",
"lon",
"lat",
"date",
# "datetime",
"observer",
"effort_time")
######################################################################
# 2012
dat = path %>%
file.path("Birds", "birds_observations.csv") %>%
read.csv(stringsAsFactors = FALSE, fileEncoding = "UTF-8")
dat$campaign = "T0"
dat$group = "Birds"
dat$year = 2012
dat$unit_original = dat$unit_eng
dat$unit = dat$unit_original %>%
strsplit(" - ") %>%
sapply("[", 1)
dat$subunit = dat$unit_original %>%
strsplit(" - ") %>%
sapply("[", 2)
dat$site = dat$site_eng
dat$factor = dat$factor_eng
dat$proximity = ifelse(dat$proximity == "N", "Near", "Far")
dat$habitat = NA
dat$lon = dat$lon
dat$lat = dat$lat
dat$date = as.Date(dat$date, format = "%d/%m/%Y")
dat$datetime = NA
#dat$species_latin = dat$latin_name
dat$rad1 = dat$rad1
dat$rad2 = dat$rad2
dat$rad3 = dat$rad3
dat$rad4 = dat$rad4
dat$total = dat$rad1 + dat$rad2 + dat$rad3 + dat$rad4
dat$comments = NA
# Site names
dat$site[dat$site == "Ein Yaacov"] = "Ein Yaakov"
# Unit names
dat$unit[dat$unit == "Mediterranean-Desert Transition Zone (Northern Negev)"] =
"Mediterranean-Desert Transition Zone"
dat$unit[dat$unit == "Planted Forests in the Mediterranean-Desert Transition Zone"] =
"Loess Covered Areas in the Northern Negev"
# Season
dat$season[dat$unit == "Arid South"] = "spring"
dat$season[dat$unit == "Loess Covered Areas in the Northern Negev"] = "spring_summer_autumn"
dat$season[dat$unit == "Mediterranean Maquis"] = "spring_summer"
dat$season[dat$unit == "Mediterranean-Desert Transition Zone"] = "spring_summer"
dat$season[dat$unit == "Negev Highlands"] = "spring"
# Species names
dat$species_latin = dat$heb_name %>% trim
dat$observer = NA
# Events
dat$effort_time = "10 min"
# Site names
dat$site[dat$site == "Yiftach"] = "Yiftah"
dat$site[dat$site == "Givaat Yeshaayahu"] = "Givat Yeshayahu"
dat$site[dat$site == "Givaat Yearim"] = "Givat Yearim"
dat$site[dat$site == "Mashabey Sade"] = "Mashabei Sadeh"
dat$site[dat$site == "Yehel"] = "Yahel"
dat$site[dat$site == "Hazerim"] = "Hatzerim"
dat$site[dat$site == "Park Hazerim"] = "Sayeret Shaked"
dat$site[dat$site == "Nevatim base"] = "Nevatim Base"
# Factor names
dat$factor[dat$factor == "Savanization"] = NA
# Habitat names
dat$habitat[dat$unit == "Loess Covered Areas in the Northern Negev" & dat$proximity == "Near"] =
"KKL Plantings"
dat$habitat[dat$unit == "Loess Covered Areas in the Northern Negev" & dat$proximity == "Far"] =
"Loess"
dat$proximity[dat$unit == "Loess Covered Areas in the Northern Negev"] = NA
# Final
dat_2012 = dat[, cols]
events_2012 =
dat[, cols_events] %>%
unique
######################################################################
# "2013" (in fact 2014)
dat = path %>%
file.path("Birds", "Birds_Changelog_2013_Harel_2015.csv") %>%
read.csv(stringsAsFactors = FALSE, fileEncoding = "UTF-8")
dat$campaign = "T0"
dat$group = "Birds"
dat$year = 2014
dat$unit = dat$unit_eng
dat$subunit[dat$subunit == ""] = NA
dat$site = dat$site_eng
dat$factor[dat$unit %in% c("Mediterranean Maquis", "Mediterranean-Desert Transition Zone", "Negev Highlands")] =
"Settlements"
dat$factor[dat$unit %in% c("Arid South")] =
"Agriculture"
dat$proximity[dat$proximity == ""] = NA
dat$habitat[dat$habitat %in% c("", "Forest")] = NA
dat$lon = dat$Lon
dat$lat = dat$Lat
dat$date = as.Date(dat$date, format = "%d/%m/%Y")
# Approximate date for planted forests
dat$comments[is.na(dat$date)] = "approx. date"
dat$date[is.na(dat$date)] = as.Date("2014-02-01")
dat$datetime = NA
dat$species_latin = dat$specie_heb %>% trim
dat$rad1 = dat$Rad1
dat$rad2 = dat$Rad2
dat$rad3 = dat$Rad3
dat$rad4 = dat$Rad4
dat$rad1[is.na(dat$rad1)] = 0
dat$rad2[is.na(dat$rad2)] = 0
dat$rad3[is.na(dat$rad3)] = 0
dat$rad4[is.na(dat$rad4)] = 0
dat$total = dat$rad1 + dat$rad2 + dat$rad3 + dat$rad4
# Correct site names
# dat$site[dat$site == "Bet Yatir"] = "Beit Yatir"
# dat$site[dat$site == "Givat Yshayahu"] = "Givat Yeshayahu"
# dat$site[dat$site == "Yeshayahu"] = "Givat Yeshayahu"
# dat$site[dat$site == "Amazia"] = "Amatzia"
# dat$site[dat$site == "Ein Yaacov"] = "Ein Yaakov"
# dat$site[dat$site == "Shamai"] = "Kfar Shamai"
# dat$site[dat$site == "Hatzerim"] = "Hazerim"
# dat$site[dat$site == "Ein Yakov"] = "Ein Yaakov"
# dat$site[dat$site == "Hatzerim Base"] = "Hazerim base"
# dat$site[dat$site == "Maharal"] = "Kerem Maharal"
# dat$site[dat$site == "Nehosha"] = "Nehusha"
# dat$site[dat$site == "ofer"] = "Ofer"
# dat$site[dat$site == "Raziel"] = "Ramat Raziel"
# dat$site[dat$site == "Ye'arim"] = "Givat Yearim"
# dat$site[dat$site == "Iftach"] = "Yiftach"
#
# # Correct unit and subunit names
# sfar = c("Lahav",
#          "Lehavim",
#          "Bet Yatir",
#          "Har Amasa",
#          "Mirsham")
#
# dat$unit[dat$site %in% sfar | dat$unit == "Sfar"] = "Mediterranean-Desert Transition Zone"
# dat$unit[dat$unit %in% c("forest center", "forest north", "Horesh center", "Horesh south")] =
#   "Mediterranean Maquis"
# dat$unit[dat$unit == "Arava"] = "Arid South"
# dat$unit[dat$unit == "Savanization"] = "Loess Covered Areas in the Northern Negev"
# dat$unit[dat$unit == "Har Hanegev"] = "Negev Highlands"
#
# Galilee = c("Ein Yaakov",
#             "Goren",
#             "Kfar Shamai",
#             "Margaliot",
#             "Yiftach",
#             "Kabri",
#             "Keren Naftali",
#             "Manara",
#             "Meron",
#             "Zuriel",
#             "Abirim",
#             "Ramot Naftali",
#             "Yiftach")
# Carmel = c("Nir Etzion",
#            "Ofer",
#            "Beit Oren",
#            "Yagur",
#            "Kerem Maharal",
#            "Derech Nof Carmel",
#            "Har Horshan",
#            "Hazorea",
#            "Ramat Hashofet",
#            "Elyakim",
#            "Bat Shlomo")
# Judean_Highlands = c("Aderet",
#                      "Nehusha",
#                      "Givat Yeshayahu",
#                      "Givat Yearim",
#                      "Kisalon",
#                      "Amatzia",
#                      "Eitanim",
#                      "Yaar Kdoshim",
#                      "Ramat Raziel",
#                      "Eshtaol")
#
# dat$subunit[dat$site %in% Galilee] = "Galilee"
# dat$subunit[dat$site %in% Carmel] = "Carmel"
# dat$subunit[dat$site %in% Judean_Highlands] = "Judean Highlands"
#
# # Correct factor
# dat$factor[dat$unit == "Arid South"] = "Agriculture"
# dat$factor[dat$unit %in% c("Mediterranean-Desert Transition Zone",
#                            "Mediterranean Maquis",
#                            "Negev Highlands")] = "Settlements"
dat$observer = NA
# Events
dat$effort_time = "10 min"
# Season
dat$season[dat$unit == "Arid South"] = "winter"
dat$season[dat$unit == "Loess Covered Areas in the Northern Negev"] = "winter"
dat$season[dat$unit == "Mediterranean-Desert Transition Zone"] = "winter"
dat$season[dat$unit == "Mediterranean Maquis"] = "winter"
dat$season[dat$unit == "Negev Highlands"] = "winter"
dat$season[dat$unit == "Planted Conifer Forests"] = "winter"
# Fix dates
# dat$date[dat$site == "Sayeret Shaked"] = as.Date("2014-01-21")
# dat$date[dat$site == "Har Amasa"] = as.Date("2014-01-15")
# dat$date[dat$site == "Yeruham" & dat$proximity == "Far" & dat$habitat == "Slope"] = as.Date("2013-12-25")
# Correct site names
dat$site[dat$site == "Bet Yatir"] = "Beit Yatir"
dat$site[dat$site == "Merhavam"] = "Merhav Am"
# Final
dat_2013 = dat[, cols]
events_2013 =
dat[, cols_events] %>%
unique
######################################################################
# 2014
# wb = loadWorkbook("C:\\Users\\Michael Dorman\\Google Drive\\Maarag\\Data\\Birds\\birds_monitoring_form_2014a.xlsx")
# df1 = readWorksheet(wb, sheet = "birds_monitoring_form", header = TRUE)
# df2 = readWorksheet(wb, sheet = "birds_monitoring_form_bird_obse", header = TRUE)
# colnames(df1)[which(colnames(df1) == "fulcrum_id")] = "ID"
# colnames(df2)[which(colnames(df2) == "fulcrum_parent_id")] = "ID"
# dat1 = join(df1, df2, "ID", type = "right")
#
# wb = loadWorkbook("C:\\Users\\Michael Dorman\\Google Drive\\Maarag\\Data\\Birds\\birds_monitoring_form_ios_2014b.xlsx")
# df1 = readWorksheet(wb, sheet = "birds_monitoring_form_ios", header = TRUE)
# df2 = readWorksheet(wb, sheet = "birds_monitoring_form_ios_bird_", header = TRUE)
# colnames(df1)[which(colnames(df1) == "fulcrum_id")] = "ID"
# colnames(df2)[which(colnames(df2) == "fulcrum_parent_id")] = "ID"
# dat2 = join(df1, df2, "ID", type = "right")
#
# selection = c(
#   "updated_at",
#   "status",
#   "longitude",
#   "latitude",
#   "site",
#   "point_name",
#   "stream",
#   "landcover",
#   "misla",
#   "stream",
#   "species",
#   "species_other",
#   "number_observed_0_20m_radius",
#   "number_observed_20_100m_radius",
#   "number_observed_100_250m_radius",
#   "number_observed_over_250m_radius",
#   "notes"
# )
# dat1 = dat1[, selection]
# dat2 = dat2[, selection]
#
# dat = rbind(dat1, dat2)
#
# dat$campaign = "T0"
# dat$unit_heb = dat$site %>% strsplit(",") %>% sapply("[", 1)
# dat$site_heb = dat$site %>% strsplit(",") %>% sapply("[", 2)
# dat$site = NULL
#
# dat$unit_heb[dat$unit_heb == "סוואניזציה"] =
#   "אזורי לס בצפון הנגב"
#
# unit_names = path %>%
#   paste0("\\names_unit.csv") %>%
#   read.csv(stringsAsFactors = FALSE)
# dat = join(dat, unit_names, by = "unit_heb")
#
# dat$site_heb[dat$site_heb == "ביסלח 17"] =
#   "ביסלח"
#
# site_names = path %>%
#   paste0("\\names_site.csv") %>%
#   read.csv(stringsAsFactors = FALSE)
# dat = join(dat, site_names, by = "site_heb")
#
# dat$subunit[dat$site %in% Galilee] = "Galilee"
# dat$subunit[dat$site %in% Carmel] = "Carmel"
# dat$subunit[dat$site %in% Judean_Highlands] = "Judean Highlands"
#
# #dat$site[is.na(dat$subunit) & dat$unit == "Planted Conifer Forests"]
#
# dat$proximity[!is.na(dat$factor)] = dat$status[!is.na(dat$factor)]
# dat$proximity[dat$unit == "Loess Covered Areas in the Northern Negev"] = NA
# dat$habitat = dat$stream
# dat$habitat[dat$habitat == ""] = NA
# dat$habitat[is.na(dat$habitat)] = dat$landcover[is.na(dat$habitat)]
# dat$habitat[dat$habitat == ""] = NA
# dat$habitat[is.na(dat$habitat)] = dat$misla[is.na(dat$habitat)]
# dat$habitat[dat$habitat == ""] = NA
# dat$habitat[dat$habitat == "חקלאות בדואית"] =
#   "Bedouin"
# dat$habitat[dat$habitat == "נטיעות קקל"] =
#   "KKL Planting"
# dat$habitat[is.na(dat$habitat) & dat$unit == "Loess Covered Areas in the Northern Negev"] =
#   "Natural"
# dat$habitat[dat$habitat == "גיר"] =
#   "Limestone"
# dat$habitat[dat$habitat == "בזלת"] =
#   "Basalt"
#
# dat$datetime = as.POSIXct(dat$updated_at) %>% as.character
# dat$date = dat$datetime %>% as.Date(tz = "Asia/Jerusalem")
#
# dat$lon = dat$longitude
# dat$lat = dat$latitude
#
# species_names = path %>%
#   file.path("Birds", "birds_list.csv") %>%
#   read.csv(stringsAsFactors = FALSE, header = FALSE,
#     col.names = c("species_heb", "species"))
# dat = join(dat, species_names, by = "species")
#
# dat$species_heb[is.na(dat$species_heb)] =
#   dat$species_other[is.na(dat$species_heb)]
# dat$species_heb = trim(dat$species_heb)
#
# dat$rad1 = dat$number_observed_0_20m_radius %>% as.numeric
# dat$rad2 = dat$number_observed_20_100m_radius %>% as.numeric
# dat$rad3 = dat$number_observed_100_250m_radius %>% as.numeric
# dat$rad4 = dat$number_observed_over_250m_radius %>% as.numeric
# dat$rad1[is.na(dat$rad1)] = 0
# dat$rad2[is.na(dat$rad2)] = 0
# dat$rad3[is.na(dat$rad3)] = 0
# dat$rad4[is.na(dat$rad4)] = 0
# dat$total = dat$rad1 + dat$rad2 + dat$rad3 + dat$rad4
# dat$comments = dat$notes
# dat$comments[dat$comments == ""] = NA
#
# # Correction - Kerem Maharal and Ofer replaced
# dat$site[dat$site == "Ofer" & dat$lat > 32.6268] = "Kerem Maharal"
# dat$site[dat$site == "Kerem Maharal" & dat$lat < 32.6268] = "Ofer"
#
# # Correction - removing excess points in planted forest
# wb =
#   path %>%
#   file.path("Birds", "Forest results from 2014 with removed extra or problematic points.xlsx") %>%
#   loadWorkbook() %>%
#   readWorksheet(sheet = "forest", header = TRUE)
# wb = rename(wb, c("Lon" = "lon", "Lat" = "lat"))
# wb$omit = !is.na(wb$omit)
# dat = join(dat[, cols], wb[wb$omit, c("lon", "lat", "point_name")], by = c("lon", "lat"))
# dat = dat[is.na(dat$point_name), ]
#
# dat_2014 = dat[, cols]
######################################################################
# Combine
final = rbind(
dat_2012,
dat_2013#,
# dat_2014
)
final_events = rbind(
events_2012,
events_2013
)
# Birds observations into a single CSV
library(magrittr)
library(plyr)
# library(XLConnect)
# Sys.setlocale("LC_ALL", "Hebrew")
# path = "C:\\Google Drive\\Data"
path %>% file.path("functions_general.R") %>% source
# Columns
cols = c(
"campaign",
"group",
"year",
"season",
"unit",
"subunit",
"site",
"factor",
"proximity",
"habitat",
"lon",
"lat",
"date",
"observer",
"datetime",
"species_latin", # -> species_latin
"rad1",
"rad2",
"rad3",
"rad4",
"total",
"comments")
cols_events = c(
"campaign",
"group",
"year",
"season",
"unit",
"subunit",
"site",
"factor",
"proximity",
"habitat",
"lon",
"lat",
"date",
# "datetime",
"observer",
"effort_time")
######################################################################
# 2012
dat = path %>%
file.path("Birds", "birds_observations.csv") %>%
read.csv(stringsAsFactors = FALSE, fileEncoding = "UTF-8")
